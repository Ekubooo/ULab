#pragma kernel WaveKernel;
#pragma kernel MWaveKernel;
#pragma kernel RippleKernel;
#pragma kernel SphereKernel;
#pragma kernel TorusKernel;
#pragma kernel TorusAKernel;

#define PI 3.14159265358979323846

// dont use hlsli, not allow!
#include "SurfaceCompute.hlsl"  

RWStructuredBuffer<float3> _Pos;

float _Step, _Time, _Progress, _TransP;
uint _Res;

float2 GetUV (uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void setPosition(uint3 id, float3 position)
{
    if (id.x < _Res && id.y < _Res)
    {
        _Pos[id.x + id.y * _Res] = position;
    }
}

[numthreads(8,8,1)] 
void WaveKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, Wave(uv.x, uv.y, _Time)); 
}

[numthreads(8,8,1)] 
void MWaveKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, MultiWave(uv.x, uv.y, _Time)); 
}

[numthreads(8,8,1)] 
void CWaveKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, MultiWave(uv.x, uv.y, _Time)); 
}

[numthreads(8,8,1)] 
void RippleKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, Ripple(uv.x, uv.y, _Time)); 
}
[numthreads(8,8,1)] 
void SphereKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, Sphere(uv.x, uv.y, _Time)); 
}
[numthreads(8,8,1)] 
void TorusKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, Tours(uv.x, uv.y, _Time)); 
}

[numthreads(8,8,1)] 
void TorusAKernel (uint3 id : SV_DispatchThreadID) 
{ 
    float2 uv = GetUV(id); 
    setPosition(id, ToursA(uv.x, uv.y, _Time)); 
}

